## This NGINX configuration example file is designed to work with the intended
## installation of the ppau-graphics setup. 
## You should hopefully only need to replace SITE_NAME.TLD with that of your server,
### and set up SSL properly. 

## If you're running on a subdomain (i.e.  gfx.example.org  is what people navigate to)
## then this should be good to go. 
## If you want people to go to e.g.  example.org/ppau-graphics  then please refer to the 
## additional comments below for the "root" and "location /wsgi" directives.

server {
	listen 80 ;
	listen [::]:80  ;

	# everyone gets encryption
    server_name SITE_NAME.TLD;
    return 301 https://$server_name$request_uri;  
}


server {
	listen 443 ;
	listen [::]:443  ;

	server_name SITE_NAME.TLD;

    ## sample SSL cert config with Let's Encrypt
#	ssl_certificate /etc/letsencrypt/live/SITE_NAME.tld/fullchain.pem; # managed by Certbot
#	ssl_certificate_key /etc/letsencrypt/live/SITE_NAME.tld/privkey.pem; # managed by Certbot

    ## if you aren't running this on its own subdomain,
    ## you probably would need to have this:
#    root /var/www/SITE_NAME.TLD/html;
    ## instead of the line below.
	root /var/www/SITE_NAME.TLD/html/ppau-graphics;

    # find the correct index page
	index index.html index.htm;

    # gzip-compression is on by default these days, but perhaps not for SVG
    gzip_types image/svg+xml;
    
    location ~* \.(?:png|jpg|svg)$ {
        # Have some caching, but if there's an auth update or a rendering bug, 
        # move on to the replaced one fairly quick
        expires 1w;
        add_header Cache-Control "public";
        # optimise static file serving even further!
        sendfile           on;
        sendfile_max_chunk 1m;
    }
        
    ## if you're not running this on its own subdomain, you probably want
#    location /ppau-graphics/wsgi {
    ## instead of the line below.
	location /wsgi {
		include uwsgi_params;
		uwsgi_pass unix:///run/uwsgi/ppaugraphics.sock;
	}	
}